/*    Your task is to implement  2 stacks in one array efficiently.   */



class twoStacks
{
    int *arr;
    int size;
    int top1, top2;
public:
   twoStacks(int n=100){
       size = n; 
       arr = new int[n];
       top1 = -1;
       top2 = size;
   }
 
   void push1(int x);
   void push2(int x);
   int pop1();
   int pop2();
};


/* The method push to push element into the stack 2 */
void twoStacks :: push1(int x)
{
    top1++;
    if(top1 != size/2)
    arr[top1] = x;
}
   
/* The method push to push element into the stack 2*/
void twoStacks ::push2(int x)
{
    top2--;
    if(top2 >= size/2)
    arr[top2] = x;
}
   
/* The method pop to pop element from the stack 1 */
//Return the popped element
int twoStacks ::pop1()
{
    if(top1 < size/2 && top1 > -1)
    {
        int y = arr[top1];
        top1--;
        return y;
    }
    else
    return -1;
}

/* The method pop to pop element from the stack 2 */
//Return the popped element
int twoStacks :: pop2()
{
    if(top2 < size && size/2 <= top2)
    {
        int y = arr[top2];
        top2++;
        return y;
    }
    else
    return -1;
}
